/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * CashBalance
 */



public class CashBalance {
  @JsonProperty("cashAvailableForTrading")
  private Double cashAvailableForTrading = null;

  @JsonProperty("cashAvailableForWithdrawal")
  private Double cashAvailableForWithdrawal = null;

  @JsonProperty("cashCall")
  private Double cashCall = null;

  @JsonProperty("longNonMarginableMarketValue")
  private Double longNonMarginableMarketValue = null;

  @JsonProperty("totalCash")
  private Double totalCash = null;

  @JsonProperty("cashDebitCallValue")
  private Double cashDebitCallValue = null;

  @JsonProperty("unsettledCash")
  private Double unsettledCash = null;

  public CashBalance cashAvailableForTrading(Double cashAvailableForTrading) {
    this.cashAvailableForTrading = cashAvailableForTrading;
    return this;
  }

   /**
   * Get cashAvailableForTrading
   * @return cashAvailableForTrading
  **/
  @Schema(description = "")
  public Double getCashAvailableForTrading() {
    return cashAvailableForTrading;
  }

  public void setCashAvailableForTrading(Double cashAvailableForTrading) {
    this.cashAvailableForTrading = cashAvailableForTrading;
  }

  public CashBalance cashAvailableForWithdrawal(Double cashAvailableForWithdrawal) {
    this.cashAvailableForWithdrawal = cashAvailableForWithdrawal;
    return this;
  }

   /**
   * Get cashAvailableForWithdrawal
   * @return cashAvailableForWithdrawal
  **/
  @Schema(description = "")
  public Double getCashAvailableForWithdrawal() {
    return cashAvailableForWithdrawal;
  }

  public void setCashAvailableForWithdrawal(Double cashAvailableForWithdrawal) {
    this.cashAvailableForWithdrawal = cashAvailableForWithdrawal;
  }

  public CashBalance cashCall(Double cashCall) {
    this.cashCall = cashCall;
    return this;
  }

   /**
   * Get cashCall
   * @return cashCall
  **/
  @Schema(description = "")
  public Double getCashCall() {
    return cashCall;
  }

  public void setCashCall(Double cashCall) {
    this.cashCall = cashCall;
  }

  public CashBalance longNonMarginableMarketValue(Double longNonMarginableMarketValue) {
    this.longNonMarginableMarketValue = longNonMarginableMarketValue;
    return this;
  }

   /**
   * Get longNonMarginableMarketValue
   * @return longNonMarginableMarketValue
  **/
  @Schema(description = "")
  public Double getLongNonMarginableMarketValue() {
    return longNonMarginableMarketValue;
  }

  public void setLongNonMarginableMarketValue(Double longNonMarginableMarketValue) {
    this.longNonMarginableMarketValue = longNonMarginableMarketValue;
  }

  public CashBalance totalCash(Double totalCash) {
    this.totalCash = totalCash;
    return this;
  }

   /**
   * Get totalCash
   * @return totalCash
  **/
  @Schema(description = "")
  public Double getTotalCash() {
    return totalCash;
  }

  public void setTotalCash(Double totalCash) {
    this.totalCash = totalCash;
  }

  public CashBalance cashDebitCallValue(Double cashDebitCallValue) {
    this.cashDebitCallValue = cashDebitCallValue;
    return this;
  }

   /**
   * Get cashDebitCallValue
   * @return cashDebitCallValue
  **/
  @Schema(description = "")
  public Double getCashDebitCallValue() {
    return cashDebitCallValue;
  }

  public void setCashDebitCallValue(Double cashDebitCallValue) {
    this.cashDebitCallValue = cashDebitCallValue;
  }

  public CashBalance unsettledCash(Double unsettledCash) {
    this.unsettledCash = unsettledCash;
    return this;
  }

   /**
   * Get unsettledCash
   * @return unsettledCash
  **/
  @Schema(description = "")
  public Double getUnsettledCash() {
    return unsettledCash;
  }

  public void setUnsettledCash(Double unsettledCash) {
    this.unsettledCash = unsettledCash;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashBalance cashBalance = (CashBalance) o;
    return Objects.equals(this.cashAvailableForTrading, cashBalance.cashAvailableForTrading) &&
        Objects.equals(this.cashAvailableForWithdrawal, cashBalance.cashAvailableForWithdrawal) &&
        Objects.equals(this.cashCall, cashBalance.cashCall) &&
        Objects.equals(this.longNonMarginableMarketValue, cashBalance.longNonMarginableMarketValue) &&
        Objects.equals(this.totalCash, cashBalance.totalCash) &&
        Objects.equals(this.cashDebitCallValue, cashBalance.cashDebitCallValue) &&
        Objects.equals(this.unsettledCash, cashBalance.unsettledCash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashAvailableForTrading, cashAvailableForWithdrawal, cashCall, longNonMarginableMarketValue, totalCash, cashDebitCallValue, unsettledCash);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashBalance {\n");

    sb.append("    cashAvailableForTrading: ").append(toIndentedString(cashAvailableForTrading)).append("\n");
    sb.append("    cashAvailableForWithdrawal: ").append(toIndentedString(cashAvailableForWithdrawal)).append("\n");
    sb.append("    cashCall: ").append(toIndentedString(cashCall)).append("\n");
    sb.append("    longNonMarginableMarketValue: ").append(toIndentedString(longNonMarginableMarketValue)).append("\n");
    sb.append("    totalCash: ").append(toIndentedString(totalCash)).append("\n");
    sb.append("    cashDebitCallValue: ").append(toIndentedString(cashDebitCallValue)).append("\n");
    sb.append("    unsettledCash: ").append(toIndentedString(unsettledCash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
