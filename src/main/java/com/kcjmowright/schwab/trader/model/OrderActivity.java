/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.ExecutionLeg;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * OrderActivity
 */


@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "activityType", visible = true )
@JsonSubTypes({
})

public class OrderActivity {
  /**
   * Gets or Sets activityType
   */
  public enum ActivityTypeEnum {
    EXECUTION("EXECUTION"),
    ORDER_ACTION("ORDER_ACTION");

    private String value;

    ActivityTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ActivityTypeEnum fromValue(String input) {
      for (ActivityTypeEnum b : ActivityTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonTypeId
  private ActivityTypeEnum activityType = null;

  /**
   * Gets or Sets executionType
   */
  public enum ExecutionTypeEnum {
    FILL("FILL");

    private String value;

    ExecutionTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ExecutionTypeEnum fromValue(String input) {
      for (ExecutionTypeEnum b : ExecutionTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("executionType")
  private ExecutionTypeEnum executionType = null;

  @JsonProperty("quantity")
  private Double quantity = null;

  @JsonProperty("orderRemainingQuantity")
  private Double orderRemainingQuantity = null;

  @JsonProperty("executionLegs")
  private List<ExecutionLeg> executionLegs = null;

  public OrderActivity activityType(ActivityTypeEnum activityType) {
    this.activityType = activityType;
    return this;
  }

   /**
   * Get activityType
   * @return activityType
  **/
  @Schema(description = "")
  public ActivityTypeEnum getActivityType() {
    return activityType;
  }

  public void setActivityType(ActivityTypeEnum activityType) {
    this.activityType = activityType;
  }

  public OrderActivity executionType(ExecutionTypeEnum executionType) {
    this.executionType = executionType;
    return this;
  }

   /**
   * Get executionType
   * @return executionType
  **/
  @Schema(description = "")
  public ExecutionTypeEnum getExecutionType() {
    return executionType;
  }

  public void setExecutionType(ExecutionTypeEnum executionType) {
    this.executionType = executionType;
  }

  public OrderActivity quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @Schema(description = "")
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }

  public OrderActivity orderRemainingQuantity(Double orderRemainingQuantity) {
    this.orderRemainingQuantity = orderRemainingQuantity;
    return this;
  }

   /**
   * Get orderRemainingQuantity
   * @return orderRemainingQuantity
  **/
  @Schema(description = "")
  public Double getOrderRemainingQuantity() {
    return orderRemainingQuantity;
  }

  public void setOrderRemainingQuantity(Double orderRemainingQuantity) {
    this.orderRemainingQuantity = orderRemainingQuantity;
  }

  public OrderActivity executionLegs(List<ExecutionLeg> executionLegs) {
    this.executionLegs = executionLegs;
    return this;
  }

  public OrderActivity addExecutionLegsItem(ExecutionLeg executionLegsItem) {
    if (this.executionLegs == null) {
      this.executionLegs = new ArrayList<>();
    }
    this.executionLegs.add(executionLegsItem);
    return this;
  }

   /**
   * Get executionLegs
   * @return executionLegs
  **/
  @Schema(description = "")
  public List<ExecutionLeg> getExecutionLegs() {
    return executionLegs;
  }

  public void setExecutionLegs(List<ExecutionLeg> executionLegs) {
    this.executionLegs = executionLegs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderActivity orderActivity = (OrderActivity) o;
    return Objects.equals(this.activityType, orderActivity.activityType) &&
        Objects.equals(this.executionType, orderActivity.executionType) &&
        Objects.equals(this.quantity, orderActivity.quantity) &&
        Objects.equals(this.orderRemainingQuantity, orderActivity.orderRemainingQuantity) &&
        Objects.equals(this.executionLegs, orderActivity.executionLegs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityType, executionType, quantity, orderRemainingQuantity, executionLegs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderActivity {\n");
    
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    executionType: ").append(toIndentedString(executionType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    orderRemainingQuantity: ").append(toIndentedString(orderRemainingQuantity)).append("\n");
    sb.append("    executionLegs: ").append(toIndentedString(executionLegs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
