/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.TransactionInstrument;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * TransferItem
 */


@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "activityType", visible = true )
@JsonSubTypes({
})

public class TransferItem {
  @JsonProperty("instrument")
  private TransactionInstrument instrument = null;

  @JsonProperty("amount")
  private Double amount = null;

  @JsonProperty("cost")
  private Double cost = null;

  @JsonProperty("price")
  private Double price = null;

  /**
   * Gets or Sets feeType
   */
  public enum FeeTypeEnum {
    COMMISSION("COMMISSION"),
    SEC_FEE("SEC_FEE"),
    STR_FEE("STR_FEE"),
    R_FEE("R_FEE"),
    CDSC_FEE("CDSC_FEE"),
    OPT_REG_FEE("OPT_REG_FEE"),
    ADDITIONAL_FEE("ADDITIONAL_FEE"),
    MISCELLANEOUS_FEE("MISCELLANEOUS_FEE"),
    FUTURES_EXCHANGE_FEE("FUTURES_EXCHANGE_FEE"),
    LOW_PROCEEDS_COMMISSION("LOW_PROCEEDS_COMMISSION"),
    BASE_CHARGE("BASE_CHARGE"),
    GENERAL_CHARGE("GENERAL_CHARGE"),
    GST_FEE("GST_FEE"),
    TAF_FEE("TAF_FEE"),
    INDEX_OPTION_FEE("INDEX_OPTION_FEE"),
    UNKNOWN("UNKNOWN");

    private String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FeeTypeEnum fromValue(String input) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("feeType")
  private FeeTypeEnum feeType = null;

  /**
   * Gets or Sets positionEffect
   */
  public enum PositionEffectEnum {
    OPENING("OPENING"),
    CLOSING("CLOSING"),
    AUTOMATIC("AUTOMATIC"),
    UNKNOWN("UNKNOWN");

    private String value;

    PositionEffectEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PositionEffectEnum fromValue(String input) {
      for (PositionEffectEnum b : PositionEffectEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("positionEffect")
  private PositionEffectEnum positionEffect = null;

  public TransferItem instrument(TransactionInstrument instrument) {
    this.instrument = instrument;
    return this;
  }

   /**
   * Get instrument
   * @return instrument
  **/
  @Schema(description = "")
  public TransactionInstrument getInstrument() {
    return instrument;
  }

  public void setInstrument(TransactionInstrument instrument) {
    this.instrument = instrument;
  }

  public TransferItem amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(description = "")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public TransferItem cost(Double cost) {
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @Schema(description = "")
  public Double getCost() {
    return cost;
  }

  public void setCost(Double cost) {
    this.cost = cost;
  }

  public TransferItem price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @Schema(description = "")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public TransferItem feeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
    return this;
  }

   /**
   * Get feeType
   * @return feeType
  **/
  @Schema(description = "")
  public FeeTypeEnum getFeeType() {
    return feeType;
  }

  public void setFeeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
  }

  public TransferItem positionEffect(PositionEffectEnum positionEffect) {
    this.positionEffect = positionEffect;
    return this;
  }

   /**
   * Get positionEffect
   * @return positionEffect
  **/
  @Schema(description = "")
  public PositionEffectEnum getPositionEffect() {
    return positionEffect;
  }

  public void setPositionEffect(PositionEffectEnum positionEffect) {
    this.positionEffect = positionEffect;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferItem transferItem = (TransferItem) o;
    return Objects.equals(this.instrument, transferItem.instrument) &&
        Objects.equals(this.amount, transferItem.amount) &&
        Objects.equals(this.cost, transferItem.cost) &&
        Objects.equals(this.price, transferItem.price) &&
        Objects.equals(this.feeType, transferItem.feeType) &&
        Objects.equals(this.positionEffect, transferItem.positionEffect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrument, amount, cost, price, feeType, positionEffect);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferItem {\n");
    
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    positionEffect: ").append(toIndentedString(positionEffect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
