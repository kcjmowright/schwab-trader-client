/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.TransactionBaseInstrument;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
/**
 * TransactionFixedIncome
 */



public class TransactionFixedIncome extends TransactionBaseInstrument implements TransactionInstrument {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    BOND_UNIT("BOND_UNIT"),
    CERTIFICATE_OF_DEPOSIT("CERTIFICATE_OF_DEPOSIT"),
    CONVERTIBLE_BOND("CONVERTIBLE_BOND"),
    COLLATERALIZED_MORTGAGE_OBLIGATION("COLLATERALIZED_MORTGAGE_OBLIGATION"),
    CORPORATE_BOND("CORPORATE_BOND"),
    GOVERNMENT_MORTGAGE("GOVERNMENT_MORTGAGE"),
    GNMA_BONDS("GNMA_BONDS"),
    MUNICIPAL_ASSESSMENT_DISTRICT("MUNICIPAL_ASSESSMENT_DISTRICT"),
    MUNICIPAL_BOND("MUNICIPAL_BOND"),
    OTHER_GOVERNMENT("OTHER_GOVERNMENT"),
    SHORT_TERM_PAPER("SHORT_TERM_PAPER"),
    US_TREASURY_BOND("US_TREASURY_BOND"),
    US_TREASURY_BILL("US_TREASURY_BILL"),
    US_TREASURY_NOTE("US_TREASURY_NOTE"),
    US_TREASURY_ZERO_COUPON("US_TREASURY_ZERO_COUPON"),
    AGENCY_BOND("AGENCY_BOND"),
    WHEN_AS_AND_IF_ISSUED_BOND("WHEN_AS_AND_IF_ISSUED_BOND"),
    ASSET_BACKED_SECURITY("ASSET_BACKED_SECURITY"),
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("maturityDate")
  private OffsetDateTime maturityDate = null;

  @JsonProperty("factor")
  private Double factor = null;

  @JsonProperty("multiplier")
  private Double multiplier = null;

  @JsonProperty("variableRate")
  private Double variableRate = null;

  public TransactionFixedIncome type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TransactionFixedIncome maturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * Get maturityDate
   * @return maturityDate
  **/
  @Schema(description = "")
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }

  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }

  public TransactionFixedIncome factor(Double factor) {
    this.factor = factor;
    return this;
  }

   /**
   * Get factor
   * @return factor
  **/
  @Schema(description = "")
  public Double getFactor() {
    return factor;
  }

  public void setFactor(Double factor) {
    this.factor = factor;
  }

  public TransactionFixedIncome multiplier(Double multiplier) {
    this.multiplier = multiplier;
    return this;
  }

   /**
   * Get multiplier
   * @return multiplier
  **/
  @Schema(description = "")
  public Double getMultiplier() {
    return multiplier;
  }

  public void setMultiplier(Double multiplier) {
    this.multiplier = multiplier;
  }

  public TransactionFixedIncome variableRate(Double variableRate) {
    this.variableRate = variableRate;
    return this;
  }

   /**
   * Get variableRate
   * @return variableRate
  **/
  @Schema(description = "")
  public Double getVariableRate() {
    return variableRate;
  }

  public void setVariableRate(Double variableRate) {
    this.variableRate = variableRate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionFixedIncome transactionFixedIncome = (TransactionFixedIncome) o;
    return Objects.equals(this.type, transactionFixedIncome.type) &&
        Objects.equals(this.maturityDate, transactionFixedIncome.maturityDate) &&
        Objects.equals(this.factor, transactionFixedIncome.factor) &&
        Objects.equals(this.multiplier, transactionFixedIncome.multiplier) &&
        Objects.equals(this.variableRate, transactionFixedIncome.variableRate) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, maturityDate, factor, multiplier, variableRate, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionFixedIncome {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("    multiplier: ").append(toIndentedString(multiplier)).append("\n");
    sb.append("    variableRate: ").append(toIndentedString(variableRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
