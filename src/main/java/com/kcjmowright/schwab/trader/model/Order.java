/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.ComplexOrderStrategyType;
import com.kcjmowright.schwab.trader.model.Duration;
import com.kcjmowright.schwab.trader.model.Order;
import com.kcjmowright.schwab.trader.model.OrderActivity;
import com.kcjmowright.schwab.trader.model.OrderLegCollection;
import com.kcjmowright.schwab.trader.model.OrderStrategyType;
import com.kcjmowright.schwab.trader.model.OrderType;
import com.kcjmowright.schwab.trader.model.PriceLinkBasis;
import com.kcjmowright.schwab.trader.model.PriceLinkType;
import com.kcjmowright.schwab.trader.model.RequestedDestination;
import com.kcjmowright.schwab.trader.model.Session;
import com.kcjmowright.schwab.trader.model.SpecialInstruction;
import com.kcjmowright.schwab.trader.model.Status;
import com.kcjmowright.schwab.trader.model.StopPriceLinkBasis;
import com.kcjmowright.schwab.trader.model.StopPriceLinkType;
import com.kcjmowright.schwab.trader.model.StopType;
import com.kcjmowright.schwab.trader.model.TaxLotMethod;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * Order
 */



public class Order {
  @JsonProperty("session")
  private Session session = null;

  @JsonProperty("duration")
  private Duration duration = null;

  @JsonProperty("orderType")
  private OrderType orderType = null;

  @JsonProperty("cancelTime")
  private OffsetDateTime cancelTime = null;

  @JsonProperty("complexOrderStrategyType")
  private ComplexOrderStrategyType complexOrderStrategyType = null;

  @JsonProperty("quantity")
  private Double quantity = null;

  @JsonProperty("filledQuantity")
  private Double filledQuantity = null;

  @JsonProperty("remainingQuantity")
  private Double remainingQuantity = null;

  @JsonProperty("requestedDestination")
  private RequestedDestination requestedDestination = null;

  @JsonProperty("destinationLinkName")
  private String destinationLinkName = null;

  @JsonProperty("releaseTime")
  private OffsetDateTime releaseTime = null;

  @JsonProperty("stopPrice")
  private Double stopPrice = null;

  @JsonProperty("stopPriceLinkBasis")
  private StopPriceLinkBasis stopPriceLinkBasis = null;

  @JsonProperty("stopPriceLinkType")
  private StopPriceLinkType stopPriceLinkType = null;

  @JsonProperty("stopPriceOffset")
  private Double stopPriceOffset = null;

  @JsonProperty("stopType")
  private StopType stopType = null;

  @JsonProperty("priceLinkBasis")
  private PriceLinkBasis priceLinkBasis = null;

  @JsonProperty("priceLinkType")
  private PriceLinkType priceLinkType = null;

  @JsonProperty("price")
  private Double price = null;

  @JsonProperty("taxLotMethod")
  private TaxLotMethod taxLotMethod = null;

  @JsonProperty("orderLegCollection")
  private List<OrderLegCollection> orderLegCollection = null;

  @JsonProperty("activationPrice")
  private Double activationPrice = null;

  @JsonProperty("specialInstruction")
  private SpecialInstruction specialInstruction = null;

  @JsonProperty("orderStrategyType")
  private OrderStrategyType orderStrategyType = null;

  @JsonProperty("orderId")
  private Long orderId = null;

  @JsonProperty("cancelable")
  private Boolean cancelable = false;

  @JsonProperty("editable")
  private Boolean editable = false;

  @JsonProperty("status")
  private Status status = null;

  @JsonProperty("enteredTime")
  private OffsetDateTime enteredTime = null;

  @JsonProperty("closeTime")
  private OffsetDateTime closeTime = null;

  @JsonProperty("tag")
  private String tag = null;

  @JsonProperty("accountNumber")
  private Long accountNumber = null;

  @JsonProperty("orderActivityCollection")
  private List<OrderActivity> orderActivityCollection = null;

  @JsonProperty("replacingOrderCollection")
  private List<Order> replacingOrderCollection = null;

  @JsonProperty("childOrderStrategies")
  private List<Order> childOrderStrategies = null;

  @JsonProperty("statusDescription")
  private String statusDescription = null;

  public Order session(Session session) {
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @Schema(description = "")
  public Session getSession() {
    return session;
  }

  public void setSession(Session session) {
    this.session = session;
  }

  public Order duration(Duration duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public Duration getDuration() {
    return duration;
  }

  public void setDuration(Duration duration) {
    this.duration = duration;
  }

  public Order orderType(OrderType orderType) {
    this.orderType = orderType;
    return this;
  }

   /**
   * Get orderType
   * @return orderType
  **/
  @Schema(description = "")
  public OrderType getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }

  public Order cancelTime(OffsetDateTime cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

   /**
   * Get cancelTime
   * @return cancelTime
  **/
  @Schema(description = "")
  public OffsetDateTime getCancelTime() {
    return cancelTime;
  }

  public void setCancelTime(OffsetDateTime cancelTime) {
    this.cancelTime = cancelTime;
  }

  public Order complexOrderStrategyType(ComplexOrderStrategyType complexOrderStrategyType) {
    this.complexOrderStrategyType = complexOrderStrategyType;
    return this;
  }

   /**
   * Get complexOrderStrategyType
   * @return complexOrderStrategyType
  **/
  @Schema(description = "")
  public ComplexOrderStrategyType getComplexOrderStrategyType() {
    return complexOrderStrategyType;
  }

  public void setComplexOrderStrategyType(ComplexOrderStrategyType complexOrderStrategyType) {
    this.complexOrderStrategyType = complexOrderStrategyType;
  }

  public Order quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @Schema(description = "")
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }

  public Order filledQuantity(Double filledQuantity) {
    this.filledQuantity = filledQuantity;
    return this;
  }

   /**
   * Get filledQuantity
   * @return filledQuantity
  **/
  @Schema(description = "")
  public Double getFilledQuantity() {
    return filledQuantity;
  }

  public void setFilledQuantity(Double filledQuantity) {
    this.filledQuantity = filledQuantity;
  }

  public Order remainingQuantity(Double remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
    return this;
  }

   /**
   * Get remainingQuantity
   * @return remainingQuantity
  **/
  @Schema(description = "")
  public Double getRemainingQuantity() {
    return remainingQuantity;
  }

  public void setRemainingQuantity(Double remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
  }

  public Order requestedDestination(RequestedDestination requestedDestination) {
    this.requestedDestination = requestedDestination;
    return this;
  }

   /**
   * Get requestedDestination
   * @return requestedDestination
  **/
  @Schema(description = "")
  public RequestedDestination getRequestedDestination() {
    return requestedDestination;
  }

  public void setRequestedDestination(RequestedDestination requestedDestination) {
    this.requestedDestination = requestedDestination;
  }

  public Order destinationLinkName(String destinationLinkName) {
    this.destinationLinkName = destinationLinkName;
    return this;
  }

   /**
   * Get destinationLinkName
   * @return destinationLinkName
  **/
  @Schema(description = "")
  public String getDestinationLinkName() {
    return destinationLinkName;
  }

  public void setDestinationLinkName(String destinationLinkName) {
    this.destinationLinkName = destinationLinkName;
  }

  public Order releaseTime(OffsetDateTime releaseTime) {
    this.releaseTime = releaseTime;
    return this;
  }

   /**
   * Get releaseTime
   * @return releaseTime
  **/
  @Schema(description = "")
  public OffsetDateTime getReleaseTime() {
    return releaseTime;
  }

  public void setReleaseTime(OffsetDateTime releaseTime) {
    this.releaseTime = releaseTime;
  }

  public Order stopPrice(Double stopPrice) {
    this.stopPrice = stopPrice;
    return this;
  }

   /**
   * Get stopPrice
   * @return stopPrice
  **/
  @Schema(description = "")
  public Double getStopPrice() {
    return stopPrice;
  }

  public void setStopPrice(Double stopPrice) {
    this.stopPrice = stopPrice;
  }

  public Order stopPriceLinkBasis(StopPriceLinkBasis stopPriceLinkBasis) {
    this.stopPriceLinkBasis = stopPriceLinkBasis;
    return this;
  }

   /**
   * Get stopPriceLinkBasis
   * @return stopPriceLinkBasis
  **/
  @Schema(description = "")
  public StopPriceLinkBasis getStopPriceLinkBasis() {
    return stopPriceLinkBasis;
  }

  public void setStopPriceLinkBasis(StopPriceLinkBasis stopPriceLinkBasis) {
    this.stopPriceLinkBasis = stopPriceLinkBasis;
  }

  public Order stopPriceLinkType(StopPriceLinkType stopPriceLinkType) {
    this.stopPriceLinkType = stopPriceLinkType;
    return this;
  }

   /**
   * Get stopPriceLinkType
   * @return stopPriceLinkType
  **/
  @Schema(description = "")
  public StopPriceLinkType getStopPriceLinkType() {
    return stopPriceLinkType;
  }

  public void setStopPriceLinkType(StopPriceLinkType stopPriceLinkType) {
    this.stopPriceLinkType = stopPriceLinkType;
  }

  public Order stopPriceOffset(Double stopPriceOffset) {
    this.stopPriceOffset = stopPriceOffset;
    return this;
  }

   /**
   * Get stopPriceOffset
   * @return stopPriceOffset
  **/
  @Schema(description = "")
  public Double getStopPriceOffset() {
    return stopPriceOffset;
  }

  public void setStopPriceOffset(Double stopPriceOffset) {
    this.stopPriceOffset = stopPriceOffset;
  }

  public Order stopType(StopType stopType) {
    this.stopType = stopType;
    return this;
  }

   /**
   * Get stopType
   * @return stopType
  **/
  @Schema(description = "")
  public StopType getStopType() {
    return stopType;
  }

  public void setStopType(StopType stopType) {
    this.stopType = stopType;
  }

  public Order priceLinkBasis(PriceLinkBasis priceLinkBasis) {
    this.priceLinkBasis = priceLinkBasis;
    return this;
  }

   /**
   * Get priceLinkBasis
   * @return priceLinkBasis
  **/
  @Schema(description = "")
  public PriceLinkBasis getPriceLinkBasis() {
    return priceLinkBasis;
  }

  public void setPriceLinkBasis(PriceLinkBasis priceLinkBasis) {
    this.priceLinkBasis = priceLinkBasis;
  }

  public Order priceLinkType(PriceLinkType priceLinkType) {
    this.priceLinkType = priceLinkType;
    return this;
  }

   /**
   * Get priceLinkType
   * @return priceLinkType
  **/
  @Schema(description = "")
  public PriceLinkType getPriceLinkType() {
    return priceLinkType;
  }

  public void setPriceLinkType(PriceLinkType priceLinkType) {
    this.priceLinkType = priceLinkType;
  }

  public Order price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @Schema(description = "")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public Order taxLotMethod(TaxLotMethod taxLotMethod) {
    this.taxLotMethod = taxLotMethod;
    return this;
  }

   /**
   * Get taxLotMethod
   * @return taxLotMethod
  **/
  @Schema(description = "")
  public TaxLotMethod getTaxLotMethod() {
    return taxLotMethod;
  }

  public void setTaxLotMethod(TaxLotMethod taxLotMethod) {
    this.taxLotMethod = taxLotMethod;
  }

  public Order orderLegCollection(List<OrderLegCollection> orderLegCollection) {
    this.orderLegCollection = orderLegCollection;
    return this;
  }

  public Order addOrderLegCollectionItem(OrderLegCollection orderLegCollectionItem) {
    if (this.orderLegCollection == null) {
      this.orderLegCollection = new ArrayList<>();
    }
    this.orderLegCollection.add(orderLegCollectionItem);
    return this;
  }

   /**
   * Get orderLegCollection
   * @return orderLegCollection
  **/
  @Schema(description = "")
  public List<OrderLegCollection> getOrderLegCollection() {
    return orderLegCollection;
  }

  public void setOrderLegCollection(List<OrderLegCollection> orderLegCollection) {
    this.orderLegCollection = orderLegCollection;
  }

  public Order activationPrice(Double activationPrice) {
    this.activationPrice = activationPrice;
    return this;
  }

   /**
   * Get activationPrice
   * @return activationPrice
  **/
  @Schema(description = "")
  public Double getActivationPrice() {
    return activationPrice;
  }

  public void setActivationPrice(Double activationPrice) {
    this.activationPrice = activationPrice;
  }

  public Order specialInstruction(SpecialInstruction specialInstruction) {
    this.specialInstruction = specialInstruction;
    return this;
  }

   /**
   * Get specialInstruction
   * @return specialInstruction
  **/
  @Schema(description = "")
  public SpecialInstruction getSpecialInstruction() {
    return specialInstruction;
  }

  public void setSpecialInstruction(SpecialInstruction specialInstruction) {
    this.specialInstruction = specialInstruction;
  }

  public Order orderStrategyType(OrderStrategyType orderStrategyType) {
    this.orderStrategyType = orderStrategyType;
    return this;
  }

   /**
   * Get orderStrategyType
   * @return orderStrategyType
  **/
  @Schema(description = "")
  public OrderStrategyType getOrderStrategyType() {
    return orderStrategyType;
  }

  public void setOrderStrategyType(OrderStrategyType orderStrategyType) {
    this.orderStrategyType = orderStrategyType;
  }

  public Order orderId(Long orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @Schema(description = "")
  public Long getOrderId() {
    return orderId;
  }

  public void setOrderId(Long orderId) {
    this.orderId = orderId;
  }

  public Order cancelable(Boolean cancelable) {
    this.cancelable = cancelable;
    return this;
  }

   /**
   * Get cancelable
   * @return cancelable
  **/
  @Schema(description = "")
  public Boolean isCancelable() {
    return cancelable;
  }

  public void setCancelable(Boolean cancelable) {
    this.cancelable = cancelable;
  }

  public Order editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

   /**
   * Get editable
   * @return editable
  **/
  @Schema(description = "")
  public Boolean isEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }

  public Order status(Status status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }

  public Order enteredTime(OffsetDateTime enteredTime) {
    this.enteredTime = enteredTime;
    return this;
  }

   /**
   * Get enteredTime
   * @return enteredTime
  **/
  @Schema(description = "")
  public OffsetDateTime getEnteredTime() {
    return enteredTime;
  }

  public void setEnteredTime(OffsetDateTime enteredTime) {
    this.enteredTime = enteredTime;
  }

  public Order closeTime(OffsetDateTime closeTime) {
    this.closeTime = closeTime;
    return this;
  }

   /**
   * Get closeTime
   * @return closeTime
  **/
  @Schema(description = "")
  public OffsetDateTime getCloseTime() {
    return closeTime;
  }

  public void setCloseTime(OffsetDateTime closeTime) {
    this.closeTime = closeTime;
  }

  public Order tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @Schema(description = "")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public Order accountNumber(Long accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @Schema(description = "")
  public Long getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(Long accountNumber) {
    this.accountNumber = accountNumber;
  }

  public Order orderActivityCollection(List<OrderActivity> orderActivityCollection) {
    this.orderActivityCollection = orderActivityCollection;
    return this;
  }

  public Order addOrderActivityCollectionItem(OrderActivity orderActivityCollectionItem) {
    if (this.orderActivityCollection == null) {
      this.orderActivityCollection = new ArrayList<>();
    }
    this.orderActivityCollection.add(orderActivityCollectionItem);
    return this;
  }

   /**
   * Get orderActivityCollection
   * @return orderActivityCollection
  **/
  @Schema(description = "")
  public List<OrderActivity> getOrderActivityCollection() {
    return orderActivityCollection;
  }

  public void setOrderActivityCollection(List<OrderActivity> orderActivityCollection) {
    this.orderActivityCollection = orderActivityCollection;
  }

  public Order replacingOrderCollection(List<Order> replacingOrderCollection) {
    this.replacingOrderCollection = replacingOrderCollection;
    return this;
  }

  public Order addReplacingOrderCollectionItem(Order replacingOrderCollectionItem) {
    if (this.replacingOrderCollection == null) {
      this.replacingOrderCollection = new ArrayList<>();
    }
    this.replacingOrderCollection.add(replacingOrderCollectionItem);
    return this;
  }

   /**
   * Get replacingOrderCollection
   * @return replacingOrderCollection
  **/
  @Schema(description = "")
  public List<Order> getReplacingOrderCollection() {
    return replacingOrderCollection;
  }

  public void setReplacingOrderCollection(List<Order> replacingOrderCollection) {
    this.replacingOrderCollection = replacingOrderCollection;
  }

  public Order childOrderStrategies(List<Order> childOrderStrategies) {
    this.childOrderStrategies = childOrderStrategies;
    return this;
  }

  public Order addChildOrderStrategiesItem(Order childOrderStrategiesItem) {
    if (this.childOrderStrategies == null) {
      this.childOrderStrategies = new ArrayList<>();
    }
    this.childOrderStrategies.add(childOrderStrategiesItem);
    return this;
  }

   /**
   * Get childOrderStrategies
   * @return childOrderStrategies
  **/
  @Schema(description = "")
  public List<Order> getChildOrderStrategies() {
    return childOrderStrategies;
  }

  public void setChildOrderStrategies(List<Order> childOrderStrategies) {
    this.childOrderStrategies = childOrderStrategies;
  }

  public Order statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

   /**
   * Get statusDescription
   * @return statusDescription
  **/
  @Schema(description = "")
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.session, order.session) &&
        Objects.equals(this.duration, order.duration) &&
        Objects.equals(this.orderType, order.orderType) &&
        Objects.equals(this.cancelTime, order.cancelTime) &&
        Objects.equals(this.complexOrderStrategyType, order.complexOrderStrategyType) &&
        Objects.equals(this.quantity, order.quantity) &&
        Objects.equals(this.filledQuantity, order.filledQuantity) &&
        Objects.equals(this.remainingQuantity, order.remainingQuantity) &&
        Objects.equals(this.requestedDestination, order.requestedDestination) &&
        Objects.equals(this.destinationLinkName, order.destinationLinkName) &&
        Objects.equals(this.releaseTime, order.releaseTime) &&
        Objects.equals(this.stopPrice, order.stopPrice) &&
        Objects.equals(this.stopPriceLinkBasis, order.stopPriceLinkBasis) &&
        Objects.equals(this.stopPriceLinkType, order.stopPriceLinkType) &&
        Objects.equals(this.stopPriceOffset, order.stopPriceOffset) &&
        Objects.equals(this.stopType, order.stopType) &&
        Objects.equals(this.priceLinkBasis, order.priceLinkBasis) &&
        Objects.equals(this.priceLinkType, order.priceLinkType) &&
        Objects.equals(this.price, order.price) &&
        Objects.equals(this.taxLotMethod, order.taxLotMethod) &&
        Objects.equals(this.orderLegCollection, order.orderLegCollection) &&
        Objects.equals(this.activationPrice, order.activationPrice) &&
        Objects.equals(this.specialInstruction, order.specialInstruction) &&
        Objects.equals(this.orderStrategyType, order.orderStrategyType) &&
        Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.cancelable, order.cancelable) &&
        Objects.equals(this.editable, order.editable) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.enteredTime, order.enteredTime) &&
        Objects.equals(this.closeTime, order.closeTime) &&
        Objects.equals(this.tag, order.tag) &&
        Objects.equals(this.accountNumber, order.accountNumber) &&
        Objects.equals(this.orderActivityCollection, order.orderActivityCollection) &&
        Objects.equals(this.replacingOrderCollection, order.replacingOrderCollection) &&
        Objects.equals(this.childOrderStrategies, order.childOrderStrategies) &&
        Objects.equals(this.statusDescription, order.statusDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(session, duration, orderType, cancelTime, complexOrderStrategyType, quantity, filledQuantity, remainingQuantity, requestedDestination, destinationLinkName, releaseTime, stopPrice, stopPriceLinkBasis, stopPriceLinkType, stopPriceOffset, stopType, priceLinkBasis, priceLinkType, price, taxLotMethod, orderLegCollection, activationPrice, specialInstruction, orderStrategyType, orderId, cancelable, editable, status, enteredTime, closeTime, tag, accountNumber, orderActivityCollection, replacingOrderCollection, childOrderStrategies, statusDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    cancelTime: ").append(toIndentedString(cancelTime)).append("\n");
    sb.append("    complexOrderStrategyType: ").append(toIndentedString(complexOrderStrategyType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    filledQuantity: ").append(toIndentedString(filledQuantity)).append("\n");
    sb.append("    remainingQuantity: ").append(toIndentedString(remainingQuantity)).append("\n");
    sb.append("    requestedDestination: ").append(toIndentedString(requestedDestination)).append("\n");
    sb.append("    destinationLinkName: ").append(toIndentedString(destinationLinkName)).append("\n");
    sb.append("    releaseTime: ").append(toIndentedString(releaseTime)).append("\n");
    sb.append("    stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
    sb.append("    stopPriceLinkBasis: ").append(toIndentedString(stopPriceLinkBasis)).append("\n");
    sb.append("    stopPriceLinkType: ").append(toIndentedString(stopPriceLinkType)).append("\n");
    sb.append("    stopPriceOffset: ").append(toIndentedString(stopPriceOffset)).append("\n");
    sb.append("    stopType: ").append(toIndentedString(stopType)).append("\n");
    sb.append("    priceLinkBasis: ").append(toIndentedString(priceLinkBasis)).append("\n");
    sb.append("    priceLinkType: ").append(toIndentedString(priceLinkType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    taxLotMethod: ").append(toIndentedString(taxLotMethod)).append("\n");
    sb.append("    orderLegCollection: ").append(toIndentedString(orderLegCollection)).append("\n");
    sb.append("    activationPrice: ").append(toIndentedString(activationPrice)).append("\n");
    sb.append("    specialInstruction: ").append(toIndentedString(specialInstruction)).append("\n");
    sb.append("    orderStrategyType: ").append(toIndentedString(orderStrategyType)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    cancelable: ").append(toIndentedString(cancelable)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    enteredTime: ").append(toIndentedString(enteredTime)).append("\n");
    sb.append("    closeTime: ").append(toIndentedString(closeTime)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    orderActivityCollection: ").append(toIndentedString(orderActivityCollection)).append("\n");
    sb.append("    replacingOrderCollection: ").append(toIndentedString(replacingOrderCollection)).append("\n");
    sb.append("    childOrderStrategies: ").append(toIndentedString(childOrderStrategies)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
