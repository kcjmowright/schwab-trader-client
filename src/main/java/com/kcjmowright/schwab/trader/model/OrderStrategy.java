/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.AmountIndicator;
import com.kcjmowright.schwab.trader.model.ApiOrderStatus;
import com.kcjmowright.schwab.trader.model.ComplexOrderStrategyType;
import com.kcjmowright.schwab.trader.model.Duration;
import com.kcjmowright.schwab.trader.model.OrderBalance;
import com.kcjmowright.schwab.trader.model.OrderLeg;
import com.kcjmowright.schwab.trader.model.OrderStrategyType;
import com.kcjmowright.schwab.trader.model.OrderType;
import com.kcjmowright.schwab.trader.model.Session;
import com.kcjmowright.schwab.trader.model.SettlementInstruction;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * OrderStrategy
 */



public class OrderStrategy {
  @JsonProperty("accountNumber")
  private String accountNumber = null;

  /**
   * Gets or Sets advancedOrderType
   */
  public enum AdvancedOrderTypeEnum {
    NONE("NONE"),
    OTO("OTO"),
    OCO("OCO"),
    OTOCO("OTOCO"),
    OT2OCO("OT2OCO"),
    OT3OCO("OT3OCO"),
    BLAST_ALL("BLAST_ALL"),
    OTA("OTA"),
    PAIR("PAIR");

    private String value;

    AdvancedOrderTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AdvancedOrderTypeEnum fromValue(String input) {
      for (AdvancedOrderTypeEnum b : AdvancedOrderTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("advancedOrderType")
  private AdvancedOrderTypeEnum advancedOrderType = null;

  @JsonProperty("closeTime")
  private OffsetDateTime closeTime = null;

  @JsonProperty("enteredTime")
  private OffsetDateTime enteredTime = null;

  @JsonProperty("orderBalance")
  private OrderBalance orderBalance = null;

  @JsonProperty("orderStrategyType")
  private OrderStrategyType orderStrategyType = null;

  @JsonProperty("orderVersion")
  private BigDecimal orderVersion = null;

  @JsonProperty("session")
  private Session session = null;

  @JsonProperty("status")
  private ApiOrderStatus status = null;

  @JsonProperty("allOrNone")
  private Boolean allOrNone = null;

  @JsonProperty("discretionary")
  private Boolean discretionary = null;

  @JsonProperty("duration")
  private Duration duration = null;

  @JsonProperty("filledQuantity")
  private Double filledQuantity = null;

  @JsonProperty("orderType")
  private OrderType orderType = null;

  @JsonProperty("orderValue")
  private Double orderValue = null;

  @JsonProperty("price")
  private Double price = null;

  @JsonProperty("quantity")
  private Double quantity = null;

  @JsonProperty("remainingQuantity")
  private Double remainingQuantity = null;

  @JsonProperty("sellNonMarginableFirst")
  private Boolean sellNonMarginableFirst = null;

  @JsonProperty("settlementInstruction")
  private SettlementInstruction settlementInstruction = null;

  @JsonProperty("strategy")
  private ComplexOrderStrategyType strategy = null;

  @JsonProperty("amountIndicator")
  private AmountIndicator amountIndicator = null;

  @JsonProperty("orderLegs")
  private List<OrderLeg> orderLegs = null;

  public OrderStrategy accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @Schema(description = "")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public OrderStrategy advancedOrderType(AdvancedOrderTypeEnum advancedOrderType) {
    this.advancedOrderType = advancedOrderType;
    return this;
  }

   /**
   * Get advancedOrderType
   * @return advancedOrderType
  **/
  @Schema(description = "")
  public AdvancedOrderTypeEnum getAdvancedOrderType() {
    return advancedOrderType;
  }

  public void setAdvancedOrderType(AdvancedOrderTypeEnum advancedOrderType) {
    this.advancedOrderType = advancedOrderType;
  }

  public OrderStrategy closeTime(OffsetDateTime closeTime) {
    this.closeTime = closeTime;
    return this;
  }

   /**
   * Get closeTime
   * @return closeTime
  **/
  @Schema(description = "")
  public OffsetDateTime getCloseTime() {
    return closeTime;
  }

  public void setCloseTime(OffsetDateTime closeTime) {
    this.closeTime = closeTime;
  }

  public OrderStrategy enteredTime(OffsetDateTime enteredTime) {
    this.enteredTime = enteredTime;
    return this;
  }

   /**
   * Get enteredTime
   * @return enteredTime
  **/
  @Schema(description = "")
  public OffsetDateTime getEnteredTime() {
    return enteredTime;
  }

  public void setEnteredTime(OffsetDateTime enteredTime) {
    this.enteredTime = enteredTime;
  }

  public OrderStrategy orderBalance(OrderBalance orderBalance) {
    this.orderBalance = orderBalance;
    return this;
  }

   /**
   * Get orderBalance
   * @return orderBalance
  **/
  @Schema(description = "")
  public OrderBalance getOrderBalance() {
    return orderBalance;
  }

  public void setOrderBalance(OrderBalance orderBalance) {
    this.orderBalance = orderBalance;
  }

  public OrderStrategy orderStrategyType(OrderStrategyType orderStrategyType) {
    this.orderStrategyType = orderStrategyType;
    return this;
  }

   /**
   * Get orderStrategyType
   * @return orderStrategyType
  **/
  @Schema(description = "")
  public OrderStrategyType getOrderStrategyType() {
    return orderStrategyType;
  }

  public void setOrderStrategyType(OrderStrategyType orderStrategyType) {
    this.orderStrategyType = orderStrategyType;
  }

  public OrderStrategy orderVersion(BigDecimal orderVersion) {
    this.orderVersion = orderVersion;
    return this;
  }

   /**
   * Get orderVersion
   * @return orderVersion
  **/
  @Schema(description = "")
  public BigDecimal getOrderVersion() {
    return orderVersion;
  }

  public void setOrderVersion(BigDecimal orderVersion) {
    this.orderVersion = orderVersion;
  }

  public OrderStrategy session(Session session) {
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @Schema(description = "")
  public Session getSession() {
    return session;
  }

  public void setSession(Session session) {
    this.session = session;
  }

  public OrderStrategy status(ApiOrderStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public ApiOrderStatus getStatus() {
    return status;
  }

  public void setStatus(ApiOrderStatus status) {
    this.status = status;
  }

  public OrderStrategy allOrNone(Boolean allOrNone) {
    this.allOrNone = allOrNone;
    return this;
  }

   /**
   * Get allOrNone
   * @return allOrNone
  **/
  @Schema(description = "")
  public Boolean isAllOrNone() {
    return allOrNone;
  }

  public void setAllOrNone(Boolean allOrNone) {
    this.allOrNone = allOrNone;
  }

  public OrderStrategy discretionary(Boolean discretionary) {
    this.discretionary = discretionary;
    return this;
  }

   /**
   * Get discretionary
   * @return discretionary
  **/
  @Schema(description = "")
  public Boolean isDiscretionary() {
    return discretionary;
  }

  public void setDiscretionary(Boolean discretionary) {
    this.discretionary = discretionary;
  }

  public OrderStrategy duration(Duration duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public Duration getDuration() {
    return duration;
  }

  public void setDuration(Duration duration) {
    this.duration = duration;
  }

  public OrderStrategy filledQuantity(Double filledQuantity) {
    this.filledQuantity = filledQuantity;
    return this;
  }

   /**
   * Get filledQuantity
   * @return filledQuantity
  **/
  @Schema(description = "")
  public Double getFilledQuantity() {
    return filledQuantity;
  }

  public void setFilledQuantity(Double filledQuantity) {
    this.filledQuantity = filledQuantity;
  }

  public OrderStrategy orderType(OrderType orderType) {
    this.orderType = orderType;
    return this;
  }

   /**
   * Get orderType
   * @return orderType
  **/
  @Schema(description = "")
  public OrderType getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }

  public OrderStrategy orderValue(Double orderValue) {
    this.orderValue = orderValue;
    return this;
  }

   /**
   * Get orderValue
   * @return orderValue
  **/
  @Schema(description = "")
  public Double getOrderValue() {
    return orderValue;
  }

  public void setOrderValue(Double orderValue) {
    this.orderValue = orderValue;
  }

  public OrderStrategy price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @Schema(description = "")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public OrderStrategy quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @Schema(description = "")
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }

  public OrderStrategy remainingQuantity(Double remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
    return this;
  }

   /**
   * Get remainingQuantity
   * @return remainingQuantity
  **/
  @Schema(description = "")
  public Double getRemainingQuantity() {
    return remainingQuantity;
  }

  public void setRemainingQuantity(Double remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
  }

  public OrderStrategy sellNonMarginableFirst(Boolean sellNonMarginableFirst) {
    this.sellNonMarginableFirst = sellNonMarginableFirst;
    return this;
  }

   /**
   * Get sellNonMarginableFirst
   * @return sellNonMarginableFirst
  **/
  @Schema(description = "")
  public Boolean isSellNonMarginableFirst() {
    return sellNonMarginableFirst;
  }

  public void setSellNonMarginableFirst(Boolean sellNonMarginableFirst) {
    this.sellNonMarginableFirst = sellNonMarginableFirst;
  }

  public OrderStrategy settlementInstruction(SettlementInstruction settlementInstruction) {
    this.settlementInstruction = settlementInstruction;
    return this;
  }

   /**
   * Get settlementInstruction
   * @return settlementInstruction
  **/
  @Schema(description = "")
  public SettlementInstruction getSettlementInstruction() {
    return settlementInstruction;
  }

  public void setSettlementInstruction(SettlementInstruction settlementInstruction) {
    this.settlementInstruction = settlementInstruction;
  }

  public OrderStrategy strategy(ComplexOrderStrategyType strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * Get strategy
   * @return strategy
  **/
  @Schema(description = "")
  public ComplexOrderStrategyType getStrategy() {
    return strategy;
  }

  public void setStrategy(ComplexOrderStrategyType strategy) {
    this.strategy = strategy;
  }

  public OrderStrategy amountIndicator(AmountIndicator amountIndicator) {
    this.amountIndicator = amountIndicator;
    return this;
  }

   /**
   * Get amountIndicator
   * @return amountIndicator
  **/
  @Schema(description = "")
  public AmountIndicator getAmountIndicator() {
    return amountIndicator;
  }

  public void setAmountIndicator(AmountIndicator amountIndicator) {
    this.amountIndicator = amountIndicator;
  }

  public OrderStrategy orderLegs(List<OrderLeg> orderLegs) {
    this.orderLegs = orderLegs;
    return this;
  }

  public OrderStrategy addOrderLegsItem(OrderLeg orderLegsItem) {
    if (this.orderLegs == null) {
      this.orderLegs = new ArrayList<>();
    }
    this.orderLegs.add(orderLegsItem);
    return this;
  }

   /**
   * Get orderLegs
   * @return orderLegs
  **/
  @Schema(description = "")
  public List<OrderLeg> getOrderLegs() {
    return orderLegs;
  }

  public void setOrderLegs(List<OrderLeg> orderLegs) {
    this.orderLegs = orderLegs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderStrategy orderStrategy = (OrderStrategy) o;
    return Objects.equals(this.accountNumber, orderStrategy.accountNumber) &&
        Objects.equals(this.advancedOrderType, orderStrategy.advancedOrderType) &&
        Objects.equals(this.closeTime, orderStrategy.closeTime) &&
        Objects.equals(this.enteredTime, orderStrategy.enteredTime) &&
        Objects.equals(this.orderBalance, orderStrategy.orderBalance) &&
        Objects.equals(this.orderStrategyType, orderStrategy.orderStrategyType) &&
        Objects.equals(this.orderVersion, orderStrategy.orderVersion) &&
        Objects.equals(this.session, orderStrategy.session) &&
        Objects.equals(this.status, orderStrategy.status) &&
        Objects.equals(this.allOrNone, orderStrategy.allOrNone) &&
        Objects.equals(this.discretionary, orderStrategy.discretionary) &&
        Objects.equals(this.duration, orderStrategy.duration) &&
        Objects.equals(this.filledQuantity, orderStrategy.filledQuantity) &&
        Objects.equals(this.orderType, orderStrategy.orderType) &&
        Objects.equals(this.orderValue, orderStrategy.orderValue) &&
        Objects.equals(this.price, orderStrategy.price) &&
        Objects.equals(this.quantity, orderStrategy.quantity) &&
        Objects.equals(this.remainingQuantity, orderStrategy.remainingQuantity) &&
        Objects.equals(this.sellNonMarginableFirst, orderStrategy.sellNonMarginableFirst) &&
        Objects.equals(this.settlementInstruction, orderStrategy.settlementInstruction) &&
        Objects.equals(this.strategy, orderStrategy.strategy) &&
        Objects.equals(this.amountIndicator, orderStrategy.amountIndicator) &&
        Objects.equals(this.orderLegs, orderStrategy.orderLegs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, advancedOrderType, closeTime, enteredTime, orderBalance, orderStrategyType, orderVersion, session, status, allOrNone, discretionary, duration, filledQuantity, orderType, orderValue, price, quantity, remainingQuantity, sellNonMarginableFirst, settlementInstruction, strategy, amountIndicator, orderLegs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderStrategy {\n");
    
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    advancedOrderType: ").append(toIndentedString(advancedOrderType)).append("\n");
    sb.append("    closeTime: ").append(toIndentedString(closeTime)).append("\n");
    sb.append("    enteredTime: ").append(toIndentedString(enteredTime)).append("\n");
    sb.append("    orderBalance: ").append(toIndentedString(orderBalance)).append("\n");
    sb.append("    orderStrategyType: ").append(toIndentedString(orderStrategyType)).append("\n");
    sb.append("    orderVersion: ").append(toIndentedString(orderVersion)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    allOrNone: ").append(toIndentedString(allOrNone)).append("\n");
    sb.append("    discretionary: ").append(toIndentedString(discretionary)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    filledQuantity: ").append(toIndentedString(filledQuantity)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    orderValue: ").append(toIndentedString(orderValue)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    remainingQuantity: ").append(toIndentedString(remainingQuantity)).append("\n");
    sb.append("    sellNonMarginableFirst: ").append(toIndentedString(sellNonMarginableFirst)).append("\n");
    sb.append("    settlementInstruction: ").append(toIndentedString(settlementInstruction)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    amountIndicator: ").append(toIndentedString(amountIndicator)).append("\n");
    sb.append("    orderLegs: ").append(toIndentedString(orderLegs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
