/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.time.OffsetDateTime;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Future
 */



public class Future implements TransactionInstrument {
  @JsonProperty("activeContract")
  private Boolean activeContract = false;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    STANDARD("STANDARD"),
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("expirationDate")
  private OffsetDateTime expirationDate = null;

  @JsonProperty("lastTradingDate")
  private OffsetDateTime lastTradingDate = null;

  @JsonProperty("firstNoticeDate")
  private OffsetDateTime firstNoticeDate = null;

  @JsonProperty("multiplier")
  private Double multiplier = null;

  public Future activeContract(Boolean activeContract) {
    this.activeContract = activeContract;
    return this;
  }

   /**
   * Get activeContract
   * @return activeContract
  **/
  @Schema(description = "")
  public Boolean isActiveContract() {
    return activeContract;
  }

  public void setActiveContract(Boolean activeContract) {
    this.activeContract = activeContract;
  }

  public Future type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Future expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @Schema(description = "")
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }

  public Future lastTradingDate(OffsetDateTime lastTradingDate) {
    this.lastTradingDate = lastTradingDate;
    return this;
  }

   /**
   * Get lastTradingDate
   * @return lastTradingDate
  **/
  @Schema(description = "")
  public OffsetDateTime getLastTradingDate() {
    return lastTradingDate;
  }

  public void setLastTradingDate(OffsetDateTime lastTradingDate) {
    this.lastTradingDate = lastTradingDate;
  }

  public Future firstNoticeDate(OffsetDateTime firstNoticeDate) {
    this.firstNoticeDate = firstNoticeDate;
    return this;
  }

   /**
   * Get firstNoticeDate
   * @return firstNoticeDate
  **/
  @Schema(description = "")
  public OffsetDateTime getFirstNoticeDate() {
    return firstNoticeDate;
  }

  public void setFirstNoticeDate(OffsetDateTime firstNoticeDate) {
    this.firstNoticeDate = firstNoticeDate;
  }

  public Future multiplier(Double multiplier) {
    this.multiplier = multiplier;
    return this;
  }

   /**
   * Get multiplier
   * @return multiplier
  **/
  @Schema(description = "")
  public Double getMultiplier() {
    return multiplier;
  }

  public void setMultiplier(Double multiplier) {
    this.multiplier = multiplier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Future future = (Future) o;
    return Objects.equals(this.activeContract, future.activeContract) &&
        Objects.equals(this.type, future.type) &&
        Objects.equals(this.expirationDate, future.expirationDate) &&
        Objects.equals(this.lastTradingDate, future.lastTradingDate) &&
        Objects.equals(this.firstNoticeDate, future.firstNoticeDate) &&
        Objects.equals(this.multiplier, future.multiplier) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeContract, type, expirationDate, lastTradingDate, firstNoticeDate, multiplier, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Future {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    activeContract: ").append(toIndentedString(activeContract)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    lastTradingDate: ").append(toIndentedString(lastTradingDate)).append("\n");
    sb.append("    firstNoticeDate: ").append(toIndentedString(firstNoticeDate)).append("\n");
    sb.append("    multiplier: ").append(toIndentedString(multiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
