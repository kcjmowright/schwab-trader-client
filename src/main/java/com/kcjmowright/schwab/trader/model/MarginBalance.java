/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * MarginBalance
 */



public class MarginBalance {
  @JsonProperty("availableFunds")
  private Double availableFunds = null;

  @JsonProperty("availableFundsNonMarginableTrade")
  private Double availableFundsNonMarginableTrade = null;

  @JsonProperty("buyingPower")
  private Double buyingPower = null;

  @JsonProperty("buyingPowerNonMarginableTrade")
  private Double buyingPowerNonMarginableTrade = null;

  @JsonProperty("dayTradingBuyingPower")
  private Double dayTradingBuyingPower = null;

  @JsonProperty("dayTradingBuyingPowerCall")
  private Double dayTradingBuyingPowerCall = null;

  @JsonProperty("equity")
  private Double equity = null;

  @JsonProperty("equityPercentage")
  private Double equityPercentage = null;

  @JsonProperty("longMarginValue")
  private Double longMarginValue = null;

  @JsonProperty("maintenanceCall")
  private Double maintenanceCall = null;

  @JsonProperty("maintenanceRequirement")
  private Double maintenanceRequirement = null;

  @JsonProperty("marginBalance")
  private Double marginBalance = null;

  @JsonProperty("regTCall")
  private Double regTCall = null;

  @JsonProperty("shortBalance")
  private Double shortBalance = null;

  @JsonProperty("shortMarginValue")
  private Double shortMarginValue = null;

  @JsonProperty("sma")
  private Double sma = null;

  @JsonProperty("isInCall")
  private Double isInCall = null;

  @JsonProperty("stockBuyingPower")
  private Double stockBuyingPower = null;

  @JsonProperty("optionBuyingPower")
  private Double optionBuyingPower = null;

  public MarginBalance availableFunds(Double availableFunds) {
    this.availableFunds = availableFunds;
    return this;
  }

   /**
   * Get availableFunds
   * @return availableFunds
  **/
  @Schema(description = "")
  public Double getAvailableFunds() {
    return availableFunds;
  }

  public void setAvailableFunds(Double availableFunds) {
    this.availableFunds = availableFunds;
  }

  public MarginBalance availableFundsNonMarginableTrade(Double availableFundsNonMarginableTrade) {
    this.availableFundsNonMarginableTrade = availableFundsNonMarginableTrade;
    return this;
  }

   /**
   * Get availableFundsNonMarginableTrade
   * @return availableFundsNonMarginableTrade
  **/
  @Schema(description = "")
  public Double getAvailableFundsNonMarginableTrade() {
    return availableFundsNonMarginableTrade;
  }

  public void setAvailableFundsNonMarginableTrade(Double availableFundsNonMarginableTrade) {
    this.availableFundsNonMarginableTrade = availableFundsNonMarginableTrade;
  }

  public MarginBalance buyingPower(Double buyingPower) {
    this.buyingPower = buyingPower;
    return this;
  }

   /**
   * Get buyingPower
   * @return buyingPower
  **/
  @Schema(description = "")
  public Double getBuyingPower() {
    return buyingPower;
  }

  public void setBuyingPower(Double buyingPower) {
    this.buyingPower = buyingPower;
  }

  public MarginBalance buyingPowerNonMarginableTrade(Double buyingPowerNonMarginableTrade) {
    this.buyingPowerNonMarginableTrade = buyingPowerNonMarginableTrade;
    return this;
  }

   /**
   * Get buyingPowerNonMarginableTrade
   * @return buyingPowerNonMarginableTrade
  **/
  @Schema(description = "")
  public Double getBuyingPowerNonMarginableTrade() {
    return buyingPowerNonMarginableTrade;
  }

  public void setBuyingPowerNonMarginableTrade(Double buyingPowerNonMarginableTrade) {
    this.buyingPowerNonMarginableTrade = buyingPowerNonMarginableTrade;
  }

  public MarginBalance dayTradingBuyingPower(Double dayTradingBuyingPower) {
    this.dayTradingBuyingPower = dayTradingBuyingPower;
    return this;
  }

   /**
   * Get dayTradingBuyingPower
   * @return dayTradingBuyingPower
  **/
  @Schema(description = "")
  public Double getDayTradingBuyingPower() {
    return dayTradingBuyingPower;
  }

  public void setDayTradingBuyingPower(Double dayTradingBuyingPower) {
    this.dayTradingBuyingPower = dayTradingBuyingPower;
  }

  public MarginBalance dayTradingBuyingPowerCall(Double dayTradingBuyingPowerCall) {
    this.dayTradingBuyingPowerCall = dayTradingBuyingPowerCall;
    return this;
  }

   /**
   * Get dayTradingBuyingPowerCall
   * @return dayTradingBuyingPowerCall
  **/
  @Schema(description = "")
  public Double getDayTradingBuyingPowerCall() {
    return dayTradingBuyingPowerCall;
  }

  public void setDayTradingBuyingPowerCall(Double dayTradingBuyingPowerCall) {
    this.dayTradingBuyingPowerCall = dayTradingBuyingPowerCall;
  }

  public MarginBalance equity(Double equity) {
    this.equity = equity;
    return this;
  }

   /**
   * Get equity
   * @return equity
  **/
  @Schema(description = "")
  public Double getEquity() {
    return equity;
  }

  public void setEquity(Double equity) {
    this.equity = equity;
  }

  public MarginBalance equityPercentage(Double equityPercentage) {
    this.equityPercentage = equityPercentage;
    return this;
  }

   /**
   * Get equityPercentage
   * @return equityPercentage
  **/
  @Schema(description = "")
  public Double getEquityPercentage() {
    return equityPercentage;
  }

  public void setEquityPercentage(Double equityPercentage) {
    this.equityPercentage = equityPercentage;
  }

  public MarginBalance longMarginValue(Double longMarginValue) {
    this.longMarginValue = longMarginValue;
    return this;
  }

   /**
   * Get longMarginValue
   * @return longMarginValue
  **/
  @Schema(description = "")
  public Double getLongMarginValue() {
    return longMarginValue;
  }

  public void setLongMarginValue(Double longMarginValue) {
    this.longMarginValue = longMarginValue;
  }

  public MarginBalance maintenanceCall(Double maintenanceCall) {
    this.maintenanceCall = maintenanceCall;
    return this;
  }

   /**
   * Get maintenanceCall
   * @return maintenanceCall
  **/
  @Schema(description = "")
  public Double getMaintenanceCall() {
    return maintenanceCall;
  }

  public void setMaintenanceCall(Double maintenanceCall) {
    this.maintenanceCall = maintenanceCall;
  }

  public MarginBalance maintenanceRequirement(Double maintenanceRequirement) {
    this.maintenanceRequirement = maintenanceRequirement;
    return this;
  }

   /**
   * Get maintenanceRequirement
   * @return maintenanceRequirement
  **/
  @Schema(description = "")
  public Double getMaintenanceRequirement() {
    return maintenanceRequirement;
  }

  public void setMaintenanceRequirement(Double maintenanceRequirement) {
    this.maintenanceRequirement = maintenanceRequirement;
  }

  public MarginBalance marginBalance(Double marginBalance) {
    this.marginBalance = marginBalance;
    return this;
  }

   /**
   * Get marginBalance
   * @return marginBalance
  **/
  @Schema(description = "")
  public Double getMarginBalance() {
    return marginBalance;
  }

  public void setMarginBalance(Double marginBalance) {
    this.marginBalance = marginBalance;
  }

  public MarginBalance regTCall(Double regTCall) {
    this.regTCall = regTCall;
    return this;
  }

   /**
   * Get regTCall
   * @return regTCall
  **/
  @Schema(description = "")
  public Double getRegTCall() {
    return regTCall;
  }

  public void setRegTCall(Double regTCall) {
    this.regTCall = regTCall;
  }

  public MarginBalance shortBalance(Double shortBalance) {
    this.shortBalance = shortBalance;
    return this;
  }

   /**
   * Get shortBalance
   * @return shortBalance
  **/
  @Schema(description = "")
  public Double getShortBalance() {
    return shortBalance;
  }

  public void setShortBalance(Double shortBalance) {
    this.shortBalance = shortBalance;
  }

  public MarginBalance shortMarginValue(Double shortMarginValue) {
    this.shortMarginValue = shortMarginValue;
    return this;
  }

   /**
   * Get shortMarginValue
   * @return shortMarginValue
  **/
  @Schema(description = "")
  public Double getShortMarginValue() {
    return shortMarginValue;
  }

  public void setShortMarginValue(Double shortMarginValue) {
    this.shortMarginValue = shortMarginValue;
  }

  public MarginBalance sma(Double sma) {
    this.sma = sma;
    return this;
  }

   /**
   * Get sma
   * @return sma
  **/
  @Schema(description = "")
  public Double getSma() {
    return sma;
  }

  public void setSma(Double sma) {
    this.sma = sma;
  }

  public MarginBalance isInCall(Double isInCall) {
    this.isInCall = isInCall;
    return this;
  }

   /**
   * Get isInCall
   * @return isInCall
  **/
  @Schema(description = "")
  public Double getIsInCall() {
    return isInCall;
  }

  public void setIsInCall(Double isInCall) {
    this.isInCall = isInCall;
  }

  public MarginBalance stockBuyingPower(Double stockBuyingPower) {
    this.stockBuyingPower = stockBuyingPower;
    return this;
  }

   /**
   * Get stockBuyingPower
   * @return stockBuyingPower
  **/
  @Schema(description = "")
  public Double getStockBuyingPower() {
    return stockBuyingPower;
  }

  public void setStockBuyingPower(Double stockBuyingPower) {
    this.stockBuyingPower = stockBuyingPower;
  }

  public MarginBalance optionBuyingPower(Double optionBuyingPower) {
    this.optionBuyingPower = optionBuyingPower;
    return this;
  }

   /**
   * Get optionBuyingPower
   * @return optionBuyingPower
  **/
  @Schema(description = "")
  public Double getOptionBuyingPower() {
    return optionBuyingPower;
  }

  public void setOptionBuyingPower(Double optionBuyingPower) {
    this.optionBuyingPower = optionBuyingPower;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarginBalance marginBalance = (MarginBalance) o;
    return Objects.equals(this.availableFunds, marginBalance.availableFunds) &&
        Objects.equals(this.availableFundsNonMarginableTrade, marginBalance.availableFundsNonMarginableTrade) &&
        Objects.equals(this.buyingPower, marginBalance.buyingPower) &&
        Objects.equals(this.buyingPowerNonMarginableTrade, marginBalance.buyingPowerNonMarginableTrade) &&
        Objects.equals(this.dayTradingBuyingPower, marginBalance.dayTradingBuyingPower) &&
        Objects.equals(this.dayTradingBuyingPowerCall, marginBalance.dayTradingBuyingPowerCall) &&
        Objects.equals(this.equity, marginBalance.equity) &&
        Objects.equals(this.equityPercentage, marginBalance.equityPercentage) &&
        Objects.equals(this.longMarginValue, marginBalance.longMarginValue) &&
        Objects.equals(this.maintenanceCall, marginBalance.maintenanceCall) &&
        Objects.equals(this.maintenanceRequirement, marginBalance.maintenanceRequirement) &&
        Objects.equals(this.marginBalance, marginBalance.marginBalance) &&
        Objects.equals(this.regTCall, marginBalance.regTCall) &&
        Objects.equals(this.shortBalance, marginBalance.shortBalance) &&
        Objects.equals(this.shortMarginValue, marginBalance.shortMarginValue) &&
        Objects.equals(this.sma, marginBalance.sma) &&
        Objects.equals(this.isInCall, marginBalance.isInCall) &&
        Objects.equals(this.stockBuyingPower, marginBalance.stockBuyingPower) &&
        Objects.equals(this.optionBuyingPower, marginBalance.optionBuyingPower);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableFunds, availableFundsNonMarginableTrade, buyingPower, buyingPowerNonMarginableTrade, dayTradingBuyingPower, dayTradingBuyingPowerCall, equity, equityPercentage, longMarginValue, maintenanceCall, maintenanceRequirement, marginBalance, regTCall, shortBalance, shortMarginValue, sma, isInCall, stockBuyingPower, optionBuyingPower);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarginBalance {\n");
    
    sb.append("    availableFunds: ").append(toIndentedString(availableFunds)).append("\n");
    sb.append("    availableFundsNonMarginableTrade: ").append(toIndentedString(availableFundsNonMarginableTrade)).append("\n");
    sb.append("    buyingPower: ").append(toIndentedString(buyingPower)).append("\n");
    sb.append("    buyingPowerNonMarginableTrade: ").append(toIndentedString(buyingPowerNonMarginableTrade)).append("\n");
    sb.append("    dayTradingBuyingPower: ").append(toIndentedString(dayTradingBuyingPower)).append("\n");
    sb.append("    dayTradingBuyingPowerCall: ").append(toIndentedString(dayTradingBuyingPowerCall)).append("\n");
    sb.append("    equity: ").append(toIndentedString(equity)).append("\n");
    sb.append("    equityPercentage: ").append(toIndentedString(equityPercentage)).append("\n");
    sb.append("    longMarginValue: ").append(toIndentedString(longMarginValue)).append("\n");
    sb.append("    maintenanceCall: ").append(toIndentedString(maintenanceCall)).append("\n");
    sb.append("    maintenanceRequirement: ").append(toIndentedString(maintenanceRequirement)).append("\n");
    sb.append("    marginBalance: ").append(toIndentedString(marginBalance)).append("\n");
    sb.append("    regTCall: ").append(toIndentedString(regTCall)).append("\n");
    sb.append("    shortBalance: ").append(toIndentedString(shortBalance)).append("\n");
    sb.append("    shortMarginValue: ").append(toIndentedString(shortMarginValue)).append("\n");
    sb.append("    sma: ").append(toIndentedString(sma)).append("\n");
    sb.append("    isInCall: ").append(toIndentedString(isInCall)).append("\n");
    sb.append("    stockBuyingPower: ").append(toIndentedString(stockBuyingPower)).append("\n");
    sb.append("    optionBuyingPower: ").append(toIndentedString(optionBuyingPower)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
