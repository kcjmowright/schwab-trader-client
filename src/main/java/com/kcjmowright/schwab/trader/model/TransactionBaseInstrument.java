/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * TransactionBaseInstrument
 */



public class TransactionBaseInstrument {
  /**
   * Gets or Sets assetType
   */
  public enum AssetTypeEnum {
    EQUITY("EQUITY"),
    OPTION("OPTION"),
    INDEX("INDEX"),
    MUTUAL_FUND("MUTUAL_FUND"),
    CASH_EQUIVALENT("CASH_EQUIVALENT"),
    FIXED_INCOME("FIXED_INCOME"),
    CURRENCY("CURRENCY"),
    COLLECTIVE_INVESTMENT("COLLECTIVE_INVESTMENT");

    private String value;

    AssetTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AssetTypeEnum fromValue(String input) {
      for (AssetTypeEnum b : AssetTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("assetType")
  private AssetTypeEnum assetType = null;

  @JsonProperty("cusip")
  private String cusip = null;

  @JsonProperty("symbol")
  private String symbol = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("instrumentId")
  private Long instrumentId = null;

  @JsonProperty("netChange")
  private Double netChange = null;

  public TransactionBaseInstrument assetType(AssetTypeEnum assetType) {
    this.assetType = assetType;
    return this;
  }

   /**
   * Get assetType
   * @return assetType
  **/
  @Schema(required = true, description = "")
  public AssetTypeEnum getAssetType() {
    return assetType;
  }

  public void setAssetType(AssetTypeEnum assetType) {
    this.assetType = assetType;
  }

  public TransactionBaseInstrument cusip(String cusip) {
    this.cusip = cusip;
    return this;
  }

   /**
   * Get cusip
   * @return cusip
  **/
  @Schema(description = "")
  public String getCusip() {
    return cusip;
  }

  public void setCusip(String cusip) {
    this.cusip = cusip;
  }

  public TransactionBaseInstrument symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @Schema(description = "")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public TransactionBaseInstrument description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TransactionBaseInstrument instrumentId(Long instrumentId) {
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * Get instrumentId
   * @return instrumentId
  **/
  @Schema(description = "")
  public Long getInstrumentId() {
    return instrumentId;
  }

  public void setInstrumentId(Long instrumentId) {
    this.instrumentId = instrumentId;
  }

  public TransactionBaseInstrument netChange(Double netChange) {
    this.netChange = netChange;
    return this;
  }

   /**
   * Get netChange
   * @return netChange
  **/
  @Schema(description = "")
  public Double getNetChange() {
    return netChange;
  }

  public void setNetChange(Double netChange) {
    this.netChange = netChange;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionBaseInstrument transactionBaseInstrument = (TransactionBaseInstrument) o;
    return Objects.equals(this.assetType, transactionBaseInstrument.assetType) &&
        Objects.equals(this.cusip, transactionBaseInstrument.cusip) &&
        Objects.equals(this.symbol, transactionBaseInstrument.symbol) &&
        Objects.equals(this.description, transactionBaseInstrument.description) &&
        Objects.equals(this.instrumentId, transactionBaseInstrument.instrumentId) &&
        Objects.equals(this.netChange, transactionBaseInstrument.netChange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetType, cusip, symbol, description, instrumentId, netChange);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionBaseInstrument {\n");
    
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    cusip: ").append(toIndentedString(cusip)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    netChange: ").append(toIndentedString(netChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
