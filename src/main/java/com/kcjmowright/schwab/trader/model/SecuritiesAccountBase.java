/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.Position;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * SecuritiesAccountBase
 */


@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true )
@JsonSubTypes({
  @JsonSubTypes.Type(value = MarginAccount.class, name = "MARGIN"),
  @JsonSubTypes.Type(value = CashAccount.class, name = "CASH"),
})

public class SecuritiesAccountBase {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    CASH("CASH"),
    MARGIN("MARGIN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonTypeId
  private TypeEnum type = null;

  @JsonProperty("accountNumber")
  private String accountNumber = null;

  @JsonProperty("roundTrips")
  private Integer roundTrips = null;

  @JsonProperty("isDayTrader")
  private Boolean isDayTrader = false;

  @JsonProperty("isClosingOnlyRestricted")
  private Boolean isClosingOnlyRestricted = false;

  @JsonProperty("pfcbFlag")
  private Boolean pfcbFlag = false;

  @JsonProperty("positions")
  private List<Position> positions = null;

  public SecuritiesAccountBase type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SecuritiesAccountBase accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @Schema(description = "")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public SecuritiesAccountBase roundTrips(Integer roundTrips) {
    this.roundTrips = roundTrips;
    return this;
  }

   /**
   * Get roundTrips
   * @return roundTrips
  **/
  @Schema(description = "")
  public Integer getRoundTrips() {
    return roundTrips;
  }

  public void setRoundTrips(Integer roundTrips) {
    this.roundTrips = roundTrips;
  }

  public SecuritiesAccountBase isDayTrader(Boolean isDayTrader) {
    this.isDayTrader = isDayTrader;
    return this;
  }

   /**
   * Get isDayTrader
   * @return isDayTrader
  **/
  @Schema(description = "")
  public Boolean isIsDayTrader() {
    return isDayTrader;
  }

  public void setIsDayTrader(Boolean isDayTrader) {
    this.isDayTrader = isDayTrader;
  }

  public SecuritiesAccountBase isClosingOnlyRestricted(Boolean isClosingOnlyRestricted) {
    this.isClosingOnlyRestricted = isClosingOnlyRestricted;
    return this;
  }

   /**
   * Get isClosingOnlyRestricted
   * @return isClosingOnlyRestricted
  **/
  @Schema(description = "")
  public Boolean isIsClosingOnlyRestricted() {
    return isClosingOnlyRestricted;
  }

  public void setIsClosingOnlyRestricted(Boolean isClosingOnlyRestricted) {
    this.isClosingOnlyRestricted = isClosingOnlyRestricted;
  }

  public SecuritiesAccountBase pfcbFlag(Boolean pfcbFlag) {
    this.pfcbFlag = pfcbFlag;
    return this;
  }

   /**
   * Get pfcbFlag
   * @return pfcbFlag
  **/
  @Schema(description = "")
  public Boolean isPfcbFlag() {
    return pfcbFlag;
  }

  public void setPfcbFlag(Boolean pfcbFlag) {
    this.pfcbFlag = pfcbFlag;
  }

  public SecuritiesAccountBase positions(List<Position> positions) {
    this.positions = positions;
    return this;
  }

  public SecuritiesAccountBase addPositionsItem(Position positionsItem) {
    if (this.positions == null) {
      this.positions = new ArrayList<>();
    }
    this.positions.add(positionsItem);
    return this;
  }

   /**
   * Get positions
   * @return positions
  **/
  @Schema(description = "")
  public List<Position> getPositions() {
    return positions;
  }

  public void setPositions(List<Position> positions) {
    this.positions = positions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecuritiesAccountBase securitiesAccountBase = (SecuritiesAccountBase) o;
    return Objects.equals(this.type, securitiesAccountBase.type) &&
        Objects.equals(this.accountNumber, securitiesAccountBase.accountNumber) &&
        Objects.equals(this.roundTrips, securitiesAccountBase.roundTrips) &&
        Objects.equals(this.isDayTrader, securitiesAccountBase.isDayTrader) &&
        Objects.equals(this.isClosingOnlyRestricted, securitiesAccountBase.isClosingOnlyRestricted) &&
        Objects.equals(this.pfcbFlag, securitiesAccountBase.pfcbFlag) &&
        Objects.equals(this.positions, securitiesAccountBase.positions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, accountNumber, roundTrips, isDayTrader, isClosingOnlyRestricted, pfcbFlag, positions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecuritiesAccountBase {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    roundTrips: ").append(toIndentedString(roundTrips)).append("\n");
    sb.append("    isDayTrader: ").append(toIndentedString(isDayTrader)).append("\n");
    sb.append("    isClosingOnlyRestricted: ").append(toIndentedString(isClosingOnlyRestricted)).append("\n");
    sb.append("    pfcbFlag: ").append(toIndentedString(pfcbFlag)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
