/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.Offer;
import com.kcjmowright.schwab.trader.model.StreamerInfo;
import com.kcjmowright.schwab.trader.model.UserPreferenceAccount;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * UserPreference
 */



public class UserPreference {
  @JsonProperty("accounts")
  private List<UserPreferenceAccount> accounts = null;

  @JsonProperty("streamerInfo")
  private List<StreamerInfo> streamerInfo = null;

  @JsonProperty("offers")
  private List<Offer> offers = null;

  public UserPreference accounts(List<UserPreferenceAccount> accounts) {
    this.accounts = accounts;
    return this;
  }

  public UserPreference addAccountsItem(UserPreferenceAccount accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * Get accounts
   * @return accounts
  **/
  @Schema(description = "")
  public List<UserPreferenceAccount> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<UserPreferenceAccount> accounts) {
    this.accounts = accounts;
  }

  public UserPreference streamerInfo(List<StreamerInfo> streamerInfo) {
    this.streamerInfo = streamerInfo;
    return this;
  }

  public UserPreference addStreamerInfoItem(StreamerInfo streamerInfoItem) {
    if (this.streamerInfo == null) {
      this.streamerInfo = new ArrayList<>();
    }
    this.streamerInfo.add(streamerInfoItem);
    return this;
  }

   /**
   * Get streamerInfo
   * @return streamerInfo
  **/
  @Schema(description = "")
  public List<StreamerInfo> getStreamerInfo() {
    return streamerInfo;
  }

  public void setStreamerInfo(List<StreamerInfo> streamerInfo) {
    this.streamerInfo = streamerInfo;
  }

  public UserPreference offers(List<Offer> offers) {
    this.offers = offers;
    return this;
  }

  public UserPreference addOffersItem(Offer offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

   /**
   * Get offers
   * @return offers
  **/
  @Schema(description = "")
  public List<Offer> getOffers() {
    return offers;
  }

  public void setOffers(List<Offer> offers) {
    this.offers = offers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPreference userPreference = (UserPreference) o;
    return Objects.equals(this.accounts, userPreference.accounts) &&
        Objects.equals(this.streamerInfo, userPreference.streamerInfo) &&
        Objects.equals(this.offers, userPreference.offers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, streamerInfo, offers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPreference {\n");
    
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    streamerInfo: ").append(toIndentedString(streamerInfo)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
