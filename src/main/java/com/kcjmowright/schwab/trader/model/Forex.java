/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.Currency;
import com.kcjmowright.schwab.trader.model.TransactionBaseInstrument;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Forex
 */



public class Forex extends TransactionBaseInstrument implements TransactionInstrument {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    STANDARD("STANDARD"),
    NBBO("NBBO"),
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("baseCurrency")
  private Currency baseCurrency = null;

  @JsonProperty("counterCurrency")
  private Currency counterCurrency = null;

  public Forex type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Forex baseCurrency(Currency baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

   /**
   * Get baseCurrency
   * @return baseCurrency
  **/
  @Schema(description = "")
  public Currency getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(Currency baseCurrency) {
    this.baseCurrency = baseCurrency;
  }

  public Forex counterCurrency(Currency counterCurrency) {
    this.counterCurrency = counterCurrency;
    return this;
  }

   /**
   * Get counterCurrency
   * @return counterCurrency
  **/
  @Schema(description = "")
  public Currency getCounterCurrency() {
    return counterCurrency;
  }

  public void setCounterCurrency(Currency counterCurrency) {
    this.counterCurrency = counterCurrency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Forex forex = (Forex) o;
    return Objects.equals(this.type, forex.type) &&
        Objects.equals(this.baseCurrency, forex.baseCurrency) &&
        Objects.equals(this.counterCurrency, forex.counterCurrency) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, baseCurrency, counterCurrency, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Forex {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    counterCurrency: ").append(toIndentedString(counterCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
