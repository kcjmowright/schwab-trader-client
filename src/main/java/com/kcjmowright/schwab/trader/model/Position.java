/*
 * Trader API - Account Access and User Preferences
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.trader.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.trader.model.AccountsInstrument;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Position
 */



public class Position {
  @JsonProperty("shortQuantity")
  private Double shortQuantity = null;

  @JsonProperty("averagePrice")
  private Double averagePrice = null;

  @JsonProperty("currentDayProfitLoss")
  private Double currentDayProfitLoss = null;

  @JsonProperty("currentDayProfitLossPercentage")
  private Double currentDayProfitLossPercentage = null;

  @JsonProperty("longQuantity")
  private Double longQuantity = null;

  @JsonProperty("settledLongQuantity")
  private Double settledLongQuantity = null;

  @JsonProperty("settledShortQuantity")
  private Double settledShortQuantity = null;

  @JsonProperty("agedQuantity")
  private Double agedQuantity = null;

  @JsonProperty("instrument")
  private AccountsInstrument instrument = null;

  @JsonProperty("marketValue")
  private Double marketValue = null;

  @JsonProperty("maintenanceRequirement")
  private Double maintenanceRequirement = null;

  @JsonProperty("averageLongPrice")
  private Double averageLongPrice = null;

  @JsonProperty("averageShortPrice")
  private Double averageShortPrice = null;

  @JsonProperty("taxLotAverageLongPrice")
  private Double taxLotAverageLongPrice = null;

  @JsonProperty("taxLotAverageShortPrice")
  private Double taxLotAverageShortPrice = null;

  @JsonProperty("longOpenProfitLoss")
  private Double longOpenProfitLoss = null;

  @JsonProperty("shortOpenProfitLoss")
  private Double shortOpenProfitLoss = null;

  @JsonProperty("previousSessionLongQuantity")
  private Double previousSessionLongQuantity = null;

  @JsonProperty("previousSessionShortQuantity")
  private Double previousSessionShortQuantity = null;

  @JsonProperty("currentDayCost")
  private Double currentDayCost = null;

  public Position shortQuantity(Double shortQuantity) {
    this.shortQuantity = shortQuantity;
    return this;
  }

   /**
   * Get shortQuantity
   * @return shortQuantity
  **/
  @Schema(description = "")
  public Double getShortQuantity() {
    return shortQuantity;
  }

  public void setShortQuantity(Double shortQuantity) {
    this.shortQuantity = shortQuantity;
  }

  public Position averagePrice(Double averagePrice) {
    this.averagePrice = averagePrice;
    return this;
  }

   /**
   * Get averagePrice
   * @return averagePrice
  **/
  @Schema(description = "")
  public Double getAveragePrice() {
    return averagePrice;
  }

  public void setAveragePrice(Double averagePrice) {
    this.averagePrice = averagePrice;
  }

  public Position currentDayProfitLoss(Double currentDayProfitLoss) {
    this.currentDayProfitLoss = currentDayProfitLoss;
    return this;
  }

   /**
   * Get currentDayProfitLoss
   * @return currentDayProfitLoss
  **/
  @Schema(description = "")
  public Double getCurrentDayProfitLoss() {
    return currentDayProfitLoss;
  }

  public void setCurrentDayProfitLoss(Double currentDayProfitLoss) {
    this.currentDayProfitLoss = currentDayProfitLoss;
  }

  public Position currentDayProfitLossPercentage(Double currentDayProfitLossPercentage) {
    this.currentDayProfitLossPercentage = currentDayProfitLossPercentage;
    return this;
  }

   /**
   * Get currentDayProfitLossPercentage
   * @return currentDayProfitLossPercentage
  **/
  @Schema(description = "")
  public Double getCurrentDayProfitLossPercentage() {
    return currentDayProfitLossPercentage;
  }

  public void setCurrentDayProfitLossPercentage(Double currentDayProfitLossPercentage) {
    this.currentDayProfitLossPercentage = currentDayProfitLossPercentage;
  }

  public Position longQuantity(Double longQuantity) {
    this.longQuantity = longQuantity;
    return this;
  }

   /**
   * Get longQuantity
   * @return longQuantity
  **/
  @Schema(description = "")
  public Double getLongQuantity() {
    return longQuantity;
  }

  public void setLongQuantity(Double longQuantity) {
    this.longQuantity = longQuantity;
  }

  public Position settledLongQuantity(Double settledLongQuantity) {
    this.settledLongQuantity = settledLongQuantity;
    return this;
  }

   /**
   * Get settledLongQuantity
   * @return settledLongQuantity
  **/
  @Schema(description = "")
  public Double getSettledLongQuantity() {
    return settledLongQuantity;
  }

  public void setSettledLongQuantity(Double settledLongQuantity) {
    this.settledLongQuantity = settledLongQuantity;
  }

  public Position settledShortQuantity(Double settledShortQuantity) {
    this.settledShortQuantity = settledShortQuantity;
    return this;
  }

   /**
   * Get settledShortQuantity
   * @return settledShortQuantity
  **/
  @Schema(description = "")
  public Double getSettledShortQuantity() {
    return settledShortQuantity;
  }

  public void setSettledShortQuantity(Double settledShortQuantity) {
    this.settledShortQuantity = settledShortQuantity;
  }

  public Position agedQuantity(Double agedQuantity) {
    this.agedQuantity = agedQuantity;
    return this;
  }

   /**
   * Get agedQuantity
   * @return agedQuantity
  **/
  @Schema(description = "")
  public Double getAgedQuantity() {
    return agedQuantity;
  }

  public void setAgedQuantity(Double agedQuantity) {
    this.agedQuantity = agedQuantity;
  }

  public Position instrument(AccountsInstrument instrument) {
    this.instrument = instrument;
    return this;
  }

   /**
   * Get instrument
   * @return instrument
  **/
  @Schema(description = "")
  public AccountsInstrument getInstrument() {
    return instrument;
  }

  public void setInstrument(AccountsInstrument instrument) {
    this.instrument = instrument;
  }

  public Position marketValue(Double marketValue) {
    this.marketValue = marketValue;
    return this;
  }

   /**
   * Get marketValue
   * @return marketValue
  **/
  @Schema(description = "")
  public Double getMarketValue() {
    return marketValue;
  }

  public void setMarketValue(Double marketValue) {
    this.marketValue = marketValue;
  }

  public Position maintenanceRequirement(Double maintenanceRequirement) {
    this.maintenanceRequirement = maintenanceRequirement;
    return this;
  }

   /**
   * Get maintenanceRequirement
   * @return maintenanceRequirement
  **/
  @Schema(description = "")
  public Double getMaintenanceRequirement() {
    return maintenanceRequirement;
  }

  public void setMaintenanceRequirement(Double maintenanceRequirement) {
    this.maintenanceRequirement = maintenanceRequirement;
  }

  public Position averageLongPrice(Double averageLongPrice) {
    this.averageLongPrice = averageLongPrice;
    return this;
  }

   /**
   * Get averageLongPrice
   * @return averageLongPrice
  **/
  @Schema(description = "")
  public Double getAverageLongPrice() {
    return averageLongPrice;
  }

  public void setAverageLongPrice(Double averageLongPrice) {
    this.averageLongPrice = averageLongPrice;
  }

  public Position averageShortPrice(Double averageShortPrice) {
    this.averageShortPrice = averageShortPrice;
    return this;
  }

   /**
   * Get averageShortPrice
   * @return averageShortPrice
  **/
  @Schema(description = "")
  public Double getAverageShortPrice() {
    return averageShortPrice;
  }

  public void setAverageShortPrice(Double averageShortPrice) {
    this.averageShortPrice = averageShortPrice;
  }

  public Position taxLotAverageLongPrice(Double taxLotAverageLongPrice) {
    this.taxLotAverageLongPrice = taxLotAverageLongPrice;
    return this;
  }

   /**
   * Get taxLotAverageLongPrice
   * @return taxLotAverageLongPrice
  **/
  @Schema(description = "")
  public Double getTaxLotAverageLongPrice() {
    return taxLotAverageLongPrice;
  }

  public void setTaxLotAverageLongPrice(Double taxLotAverageLongPrice) {
    this.taxLotAverageLongPrice = taxLotAverageLongPrice;
  }

  public Position taxLotAverageShortPrice(Double taxLotAverageShortPrice) {
    this.taxLotAverageShortPrice = taxLotAverageShortPrice;
    return this;
  }

   /**
   * Get taxLotAverageShortPrice
   * @return taxLotAverageShortPrice
  **/
  @Schema(description = "")
  public Double getTaxLotAverageShortPrice() {
    return taxLotAverageShortPrice;
  }

  public void setTaxLotAverageShortPrice(Double taxLotAverageShortPrice) {
    this.taxLotAverageShortPrice = taxLotAverageShortPrice;
  }

  public Position longOpenProfitLoss(Double longOpenProfitLoss) {
    this.longOpenProfitLoss = longOpenProfitLoss;
    return this;
  }

   /**
   * Get longOpenProfitLoss
   * @return longOpenProfitLoss
  **/
  @Schema(description = "")
  public Double getLongOpenProfitLoss() {
    return longOpenProfitLoss;
  }

  public void setLongOpenProfitLoss(Double longOpenProfitLoss) {
    this.longOpenProfitLoss = longOpenProfitLoss;
  }

  public Position shortOpenProfitLoss(Double shortOpenProfitLoss) {
    this.shortOpenProfitLoss = shortOpenProfitLoss;
    return this;
  }

   /**
   * Get shortOpenProfitLoss
   * @return shortOpenProfitLoss
  **/
  @Schema(description = "")
  public Double getShortOpenProfitLoss() {
    return shortOpenProfitLoss;
  }

  public void setShortOpenProfitLoss(Double shortOpenProfitLoss) {
    this.shortOpenProfitLoss = shortOpenProfitLoss;
  }

  public Position previousSessionLongQuantity(Double previousSessionLongQuantity) {
    this.previousSessionLongQuantity = previousSessionLongQuantity;
    return this;
  }

   /**
   * Get previousSessionLongQuantity
   * @return previousSessionLongQuantity
  **/
  @Schema(description = "")
  public Double getPreviousSessionLongQuantity() {
    return previousSessionLongQuantity;
  }

  public void setPreviousSessionLongQuantity(Double previousSessionLongQuantity) {
    this.previousSessionLongQuantity = previousSessionLongQuantity;
  }

  public Position previousSessionShortQuantity(Double previousSessionShortQuantity) {
    this.previousSessionShortQuantity = previousSessionShortQuantity;
    return this;
  }

   /**
   * Get previousSessionShortQuantity
   * @return previousSessionShortQuantity
  **/
  @Schema(description = "")
  public Double getPreviousSessionShortQuantity() {
    return previousSessionShortQuantity;
  }

  public void setPreviousSessionShortQuantity(Double previousSessionShortQuantity) {
    this.previousSessionShortQuantity = previousSessionShortQuantity;
  }

  public Position currentDayCost(Double currentDayCost) {
    this.currentDayCost = currentDayCost;
    return this;
  }

   /**
   * Get currentDayCost
   * @return currentDayCost
  **/
  @Schema(description = "")
  public Double getCurrentDayCost() {
    return currentDayCost;
  }

  public void setCurrentDayCost(Double currentDayCost) {
    this.currentDayCost = currentDayCost;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Position position = (Position) o;
    return Objects.equals(this.shortQuantity, position.shortQuantity) &&
        Objects.equals(this.averagePrice, position.averagePrice) &&
        Objects.equals(this.currentDayProfitLoss, position.currentDayProfitLoss) &&
        Objects.equals(this.currentDayProfitLossPercentage, position.currentDayProfitLossPercentage) &&
        Objects.equals(this.longQuantity, position.longQuantity) &&
        Objects.equals(this.settledLongQuantity, position.settledLongQuantity) &&
        Objects.equals(this.settledShortQuantity, position.settledShortQuantity) &&
        Objects.equals(this.agedQuantity, position.agedQuantity) &&
        Objects.equals(this.instrument, position.instrument) &&
        Objects.equals(this.marketValue, position.marketValue) &&
        Objects.equals(this.maintenanceRequirement, position.maintenanceRequirement) &&
        Objects.equals(this.averageLongPrice, position.averageLongPrice) &&
        Objects.equals(this.averageShortPrice, position.averageShortPrice) &&
        Objects.equals(this.taxLotAverageLongPrice, position.taxLotAverageLongPrice) &&
        Objects.equals(this.taxLotAverageShortPrice, position.taxLotAverageShortPrice) &&
        Objects.equals(this.longOpenProfitLoss, position.longOpenProfitLoss) &&
        Objects.equals(this.shortOpenProfitLoss, position.shortOpenProfitLoss) &&
        Objects.equals(this.previousSessionLongQuantity, position.previousSessionLongQuantity) &&
        Objects.equals(this.previousSessionShortQuantity, position.previousSessionShortQuantity) &&
        Objects.equals(this.currentDayCost, position.currentDayCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shortQuantity, averagePrice, currentDayProfitLoss, currentDayProfitLossPercentage, longQuantity, settledLongQuantity, settledShortQuantity, agedQuantity, instrument, marketValue, maintenanceRequirement, averageLongPrice, averageShortPrice, taxLotAverageLongPrice, taxLotAverageShortPrice, longOpenProfitLoss, shortOpenProfitLoss, previousSessionLongQuantity, previousSessionShortQuantity, currentDayCost);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Position {\n");
    
    sb.append("    shortQuantity: ").append(toIndentedString(shortQuantity)).append("\n");
    sb.append("    averagePrice: ").append(toIndentedString(averagePrice)).append("\n");
    sb.append("    currentDayProfitLoss: ").append(toIndentedString(currentDayProfitLoss)).append("\n");
    sb.append("    currentDayProfitLossPercentage: ").append(toIndentedString(currentDayProfitLossPercentage)).append("\n");
    sb.append("    longQuantity: ").append(toIndentedString(longQuantity)).append("\n");
    sb.append("    settledLongQuantity: ").append(toIndentedString(settledLongQuantity)).append("\n");
    sb.append("    settledShortQuantity: ").append(toIndentedString(settledShortQuantity)).append("\n");
    sb.append("    agedQuantity: ").append(toIndentedString(agedQuantity)).append("\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    maintenanceRequirement: ").append(toIndentedString(maintenanceRequirement)).append("\n");
    sb.append("    averageLongPrice: ").append(toIndentedString(averageLongPrice)).append("\n");
    sb.append("    averageShortPrice: ").append(toIndentedString(averageShortPrice)).append("\n");
    sb.append("    taxLotAverageLongPrice: ").append(toIndentedString(taxLotAverageLongPrice)).append("\n");
    sb.append("    taxLotAverageShortPrice: ").append(toIndentedString(taxLotAverageShortPrice)).append("\n");
    sb.append("    longOpenProfitLoss: ").append(toIndentedString(longOpenProfitLoss)).append("\n");
    sb.append("    shortOpenProfitLoss: ").append(toIndentedString(shortOpenProfitLoss)).append("\n");
    sb.append("    previousSessionLongQuantity: ").append(toIndentedString(previousSessionLongQuantity)).append("\n");
    sb.append("    previousSessionShortQuantity: ").append(toIndentedString(previousSessionShortQuantity)).append("\n");
    sb.append("    currentDayCost: ").append(toIndentedString(currentDayCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
